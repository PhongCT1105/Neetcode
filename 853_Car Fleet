class Solution(object):
    def carFleet(self, target, position, speed):
        """
        :type target: int
        :type position: List[int]
        :type speed: List[int]
        :rtype: int
        """

        pairs = [(p, s) for p, s in (zip(position, speed))]
        pairs.sort(reverse = True)
        fleet = []

        for p, s in pairs:
            eta = (target - p) / float(s)
            print(p, s, eta)
            # Append ETA to stack first for checking
            fleet.append(eta)

            # Check if it cross the finsih before joining fleet

            if len(fleet) > 1 and fleet[-1] <= fleet[-2]:
                fleet.pop()
            
        return len(fleet)


